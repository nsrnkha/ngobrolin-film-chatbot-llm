# -*- coding: utf-8 -*-
"""groq_film

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tcbH4a4AxUVtSoOTqqsjUGzOZ4vRaYpI
"""

import os
import streamlit as st
from langchain_groq import ChatGroq
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, AIMessage

# --- Konfigurasi halaman ---
st.set_page_config(page_title="Ngobrolin Film 🎬", page_icon="🍿")

# --- API Key dari environment / Streamlit Secrets ---
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
if not GROQ_API_KEY:
    st.error("❌ GROQ_API_KEY belum di-set. Tambahkan di `.env` (lokal) atau di Streamlit Secrets.")
    st.stop()

# --- Inisialisasi model ---
llm = ChatGroq(model="llama-3.1-8b-instant", temperature=0.8)

# --- Prompt sistem utama ---
system_prompt = """
Kamu adalah Chatbot Film yang ramah, seru, dan hanya membahas seputar film
(rekomendasi, sinopsis, detail pemeran, genre, fakta menarik).
Kamu teman diskusi film yang nyambung dalam percakapan.

Aturan utama:
1. Ingat konteks percakapan sebelumnya agar jawaban nyambung.
2. Jika user mengetik 'keluar', beri ucapan selamat tinggal ramah.
3. Jangan keluar topik film, tolak dengan sopan bila user keluar topik.
4. Rekomendasi minimal 2–3 film lengkap (judul, tahun, genre, sinopsis singkat, pemeran utama).
5. Diskusi boleh ditambah fakta menarik (sutradara, aktor, produksi).
"""

# Template prompt
prompt = ChatPromptTemplate.from_messages([
    ("system", system_prompt),
    ("human", "{user_input}")
])

# --- State ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "ended" not in st.session_state:
    st.session_state.ended = False

# --- Utility: gabungkan konteks percakapan ---
def build_context(messages, max_chars=2000):
    """Gabungkan riwayat percakapan jadi string untuk input model"""
    context = []
    for msg in messages:
        role = "User" if isinstance(msg, HumanMessage) else "Assistant"
        context.append(f"{role}: {msg.content}")
    text = "\n".join(context)
    return text[-max_chars:] if len(text) > max_chars else text

# --- UI ---
st.title("🎬 Ngobrolin Film")
st.caption("Teman ngobrol seputar film. Ketik **keluar** untuk mengakhiri obrolan.")

if st.button("🔄 Reset Obrolan"):
    st.session_state.messages = []
    st.session_state.ended = False
    st.experimental_rerun()

# --- Tampilkan riwayat ---
for msg in st.session_state.messages:
    role = "user" if isinstance(msg, HumanMessage) else "assistant"
    with st.chat_message(role):
        st.markdown(msg.content)

# --- Input User ---
if not st.session_state.ended:
    user_input = st.chat_input("Tulis pertanyaan atau obrolan seputar film...")
else:
    st.info("Sesi telah diakhiri. Tekan **Reset Obrolan** untuk mulai lagi.")
    user_input = None

# --- Proses ---
if user_input:
    # Tambahkan pesan user ke history
    st.session_state.messages.append(HumanMessage(content=user_input))
    with st.chat_message("user"):
        st.markdown(user_input)

    # Handle keluar
    if user_input.lower().strip() == "keluar":
        goodbye = (
            "🍿 Terima kasih sudah ngobrol bareng **Ngobrolin Film**!\n"
            "Semoga rekomendasi dan diskusinya bermanfaat.\n"
            "Sampai jumpa di layar berikutnya! 🎞️👋"
        )
        st.session_state.messages.append(AIMessage(content=goodbye))
        with st.chat_message("assistant"):
            st.markdown(goodbye)
        st.session_state.ended = True
        st.stop()

    # Bangun konteks percakapan (history)
    context = build_context(st.session_state.messages[:-1])  # tanpa input terbaru
    composed_input = f"{context}\n\nUser baru saja bertanya:\n{user_input}"

    # Kirim ke LLM
    chain = prompt | llm
    response = chain.invoke({"user_input": composed_input})
    answer = response.content

    # Tambahkan jawaban ke history
    st.session_state.messages.append(AIMessage(content=answer))
    with st.chat_message("assistant"):
        st.markdown(answer)

